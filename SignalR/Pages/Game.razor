@page "/games/{gameId}"
@inject IZonkClient ZonkClient
@inject IZonkEvents ZonkEvents
@inject IJsUtils JsUtils
@inject UserUtils UserUtils

<style>
	#dices-list {
		padding: 20px;
		margin: 0;
		list-style-type: none;
		display: flex;
		align-items: flex-start;
		gap: 10px;
	}

	img {
		width: 40px;
	}

	.test {
		border: 2px solid black;
	}
</style>

<div class="container">
	@if (gameInfo != null)
	{
		<p>User List</p>
		<ul>
			@foreach (var user in gameInfo.Score.Keys)
			{
				<li>@user</li>
			}
		</ul>

		if (!gameInfo.IsStarted)
		{
			if (!gameInfo.Score.Keys.Contains(userName))
			{
				<button @onclick="JoinGame">Join game</button>
			}
			<button @onclick="StartGame">Start game</button>
		}
		else
		{
			<TableScore Score="@gameInfo.Score" CurrentRound="gameInfo.CurrentRound" />
			if (!gameInfo.IsEnded)
			{
				<h3>Round: @(gameInfo.CurrentRound + 1)</h3>
			}

			if (IsZonked)
			{
				<h3>ZONKED!!!</h3>
			}


			if (gameInfo.IsEnded)
			{
				<h2>Winner: @gameInfo.winner</h2>
				<NavLink href="/">Back to menu</NavLink>
			}
			else
			{
				<DiceList OnClick="ChooseDice" DiceNumbers="@diceNumbers" />
				<DiceList OnClick="CancelDice" DiceNumbers="@selectedDices" />

				<p>Selected dices score: @RoundScore</p>

				<button disabled=@IsNotRollable @onclick="Roll">Roll the dice</button>
				<button disabled=@CantSave @onclick="EndMove">Save</button>
			}
		}
	}
</div>



@code {
	[Parameter]
	public string GameId { get; set; }

	protected GameInfo gameInfo;

	protected int GameScore;

	protected int RoundScore { get => ZonkUtils.GetScore(selectedDices); }
	protected string userName;

	protected bool IsNotRollable
	{
		get
		{
			var move = gameInfo.Moves[userName]!;
			if (move.Dices == null)
			{
				return false;
			}

			return IsZonked || (!ZonkUtils.MoveCanBeMade(selectedDices) && move.Dices != null);
		}
	}
	protected bool CantSave
	{
		get
		{
			var move = gameInfo.Moves[userName]!;
			return IsNotRollable || ((gameInfo.Moves[userName].Score + ZonkUtils.GetScore(selectedDices)) < 300);
		}
	}
	protected bool IsZonked
	{
		get
		{
			var allDices = new List<int>(diceNumbers);
			allDices.AddRange(selectedDices);
			return !ZonkUtils.IsAbleToMove(allDices) && allDices.Count() > 0;
		}
	}

	protected List<int> diceNumbers = new List<int>();

	protected List<int> selectedDices = new List<int>();

	protected async Task StartGame()
	{
		var response = await ZonkClient.StartGame(GameId);

		if (!response.IsSuccess)
		{
			await JsUtils.Alert(response.Error);
			return;
		}

		gameInfo = response.Data;
	}

	protected async Task JoinGame()
	{
		var response = await ZonkClient.AddPlayer(GameId, userName);

		if (!response.IsSuccess)
		{
			await JsUtils.Alert(response.Error);
		}
	}

	protected async Task CancelDice(int diceIndex)
	{
		diceNumbers.Add(selectedDices[diceIndex]);
		selectedDices.RemoveAt(diceIndex);
	}

	protected async Task ChooseDice(int diceIndex)
	{
		selectedDices.Add(diceNumbers[diceIndex]);
		diceNumbers.RemoveAt(diceIndex);
	}

	protected async Task Roll()
	{
		if (gameInfo.Moves[userName].Dices != null)
		{
			var response = await ZonkClient.RerollDices(GameId, userName, selectedDices);
			if (!response.IsSuccess)
			{
				await JsUtils.Alert(response.Error);
				return;
			}
			selectedDices.Clear();
			diceNumbers = response.Data?.ToList();
		}
		else
		{
			var response = await ZonkClient.RollDices(GameId, userName);
			if (!response.IsSuccess)
			{
				await JsUtils.Alert(response.Error);
				return;
			}
			diceNumbers = response.Data?.ToList();
		}
	}

	protected async Task EndMove()
	{
		var response = await ZonkClient.EndMove(GameId, userName, selectedDices);
		if (!response.IsSuccess)
		{
			await JsUtils.Alert(response.Error);
			return;
		}
		selectedDices.Clear();
		diceNumbers.Clear();
	}

	protected override async Task OnParametersSetAsync()
	{
		userName = await UserUtils.GetNameOrLogin();

		var response = await ZonkClient.GetGame(GameId);

		if (!response.IsSuccess)
		{
			await JsUtils.Alert(response.Error);
		}

		gameInfo = response.Data;
		diceNumbers = gameInfo?.Moves?[userName]?.Dices?.ToList() ?? new List<int>();

		ZonkEvents.GameHasUpdated += (async game =>
		{
			gameInfo = game;
			StateHasChanged();
		});

		await base.OnParametersSetAsync();
	}
}
